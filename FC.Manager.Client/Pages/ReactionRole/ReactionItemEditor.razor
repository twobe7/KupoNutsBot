@using FC.ReactionRoles;
@using RPC;

@inherits Modal

@if (this.IsLoading)
{
	<div class="form-row mb-2">
		Loading...
	</div>
}
else
{
	<div class="form-row">
		<!--  Reaction -->
		<div class="form-group col-md-6">
			<label>Reaction</label>

			<input class="mb-0" style="width: 500px;" placeholder="Search Emotes" @bind-value="SearchTerm" @bind-value:event="oninput" />

			<div id="drawer" class="emoji-drawer">
				@foreach (Emote emote in this.FilteredEmoteList)
				{
					string emojiClass = this.Reaction == emote.Value ? "emoji-selected" : "emoji";

					<div class="@emojiClass" @onclick="() => this.SelectReaction(emote.Value)">
						@(emote.IsStandard ? (MarkupString)emote.GetName() : (MarkupString)("<img src='" + emote.Url + "' height='40' />"))
					</div>
				}
			</div>
		</div>
	</div>

	<div class="form-row">
		<!--  Role -->
		<div class="form-group">
			<label for="roleSelect">Role To Apply</label>
			<select class="custom-select" id="roleSelect" name="roleSelect" @bind="this.Role">
				@foreach (Role role in this.RoleList)
				{
					<option value=@role.DiscordId>@role.Name</option>
				}
			</select>
		</div>
	</div>
}

<div class="modal-footer">
	<button type="button" class="btn btn-danger" @onclick="this.OnDelete">Delete</button>
	<div class="flex-fill" />
	<button type="button" class="btn btn-primary" @onclick="this.OnSave">Save</button>
	<button type="button" class="btn btn-secondary" @onclick="this.OnClose">Close</button>
</div>

@code {

	// Initialize SearchTerm to "" to prevent null's
	string SearchTerm { get; set; } = "";

	public bool IsLoading { get; set; }

	public List<Emote> EmoteList { get; set; } = new List<Emote>();
	public List<Emote> FilteredEmoteList => EmoteList.Where(i => i.Name.ToLower().Contains(SearchTerm.ToLower())).ToList();

	public List<Role> RoleList { get; set; } = new List<Role>();
	public List<Role> FilteredRoleList => RoleList.Where(i => i.Name.ToLower().Contains(SearchTerm.ToLower())).ToList();

	private ReactionRoles.ReactionRoleItem item;

	public string Reaction
	{
		get
		{
			return this.item.Reaction;
		}
		set
		{
			this.item.Reaction = value;
			SetReactionProperties(this.EmoteList.FirstOrDefault(x => x.Value == value));
		}
	}

	public ulong Role
	{
		get
		{
			return this.item.Role ?? 0;
		}
		set
		{
			this.item.Role = value == 0 ? (ulong?)null : value;
			this.item.RoleName = this.RoleList.FirstOrDefault(x => x.DiscordId == value.ToString()).Name;
		}
	}

	public void Initialize(ReactionRoles.ReactionRoleItem item, List<Emote> emotes, List<Role> roles)
	{
		this.IsLoading = true;
		this.item = item;

		// Apply 
		this.EmoteList = emotes;
		this.RoleList = roles;

		if (string.IsNullOrWhiteSpace(this.item.Reaction))
			SetReactionProperties(this.EmoteList.FirstOrDefault());

		this.IsLoading = false;
	}

	private async void OnSave()
	{
		await RPCService.Invoke("ReactionRoleService.UpdateReactionItem", this.item, this.EmoteList.FirstOrDefault(x => x.Value == this.Reaction));
		this.Close();
	}

	private void OnClose()
	{
		this.Close();
	}

	private async void OnDelete()
	{
		this.Close();

		bool confirmed = await Modal.Show<bool, ConfirmDelete>("Delete Reaction Item", this.item.RoleName);
		if (confirmed)
		{
			await RPCService.Invoke("ReactionRoleService.DeleteReactionItem", this.item.Role);
		}
	}

	private void SetReactionProperties(Emote selectedEmote)
	{
		this.item.Reaction = selectedEmote.Value;
		this.item.ReactionName = selectedEmote.Name;
		this.item.Url = selectedEmote.Url;
		this.item.IsStandard = selectedEmote.IsStandard;
	}

	private void SelectReaction(string value)
	{
		this.Reaction = value;
	}
}