@page "/shop"
@using FC.Shop;
@using FC.Utils;
@using NodaTime;
@using System.Globalization;
@using RPC;

@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (this.AllShopItems == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="wrapper">
		<table class="table table-dark">
			<thead>
				<tr>
					<th width="20%">Name</th>
					<th>Description</th>
					<th>Reaction</th>
					<th>Mentioned Role</th>
					<th>Cost</th>
				</tr>
			</thead>
			<tbody>
				@foreach (ShopItem item in this.AllShopItems)
				{
				<tr @onclick="() => this.OnEdit(item)" class="table-clickable">
					<td>@item.Name</td>
					<td>@item.Description</td>
					<td>@item.Reaction</td>
					<td>@item.Role</td>
					<td>@item.Cost</td>
				</tr>
				}
			</tbody>
		</table>

		<div class="push"></div>
	</div>
	<div class="footer">
		<div class="footer-content">
			<button class="btn btn-primary" @onclick="this.OnCreateNew">New</button>
		</div>
	</div>
}

@code {

	public List<ShopItem> AllShopItems;
	public List<Channel> AllChannels;

	protected override async Task OnInitializedAsync()
	{
		if (!Authentication.IsAuthenticated)
		{
			this.NavigationManager.NavigateTo("/");
			return;
		}

		await base.OnInitializedAsync();

		this.AllShopItems = await RPCService.Invoke<List<ShopItem>>("ShopService.GetShopItems");
		this.AllChannels = new List<Channel>();
	}

	protected async void OnEdit(ShopItem item)
	{
		ModalParameters parameters = new ModalParameters();
		parameters.Add("Item", item);

		await Modal.Show<ShopItemEditor>("Edit Shop Item", item);
		this.AllShopItems = await RPCService.Invoke<List<ShopItem>>("ShopService.GetShopItems");
		this.StateHasChanged();
	}

	protected void OnCreateNew()
	{
		ShopItem item = new ShopItem();
		item.Id = Guid.NewGuid().ToString();
		OnEdit(item);
	}

	////protected async void OnSettings()
	////{
	////	FC.Events.EventsSettings set = await RPCService.Invoke<FC.Events.EventsSettings>("EventsV2Service.GetSettings");
	////	set = await Inspector.Inspect(set);

	////	if (set == null)
	////		return;

	////	await RPCService.Invoke<FC.Events.EventsSettings>("EventsV2Service.SaveSettings", set);
	////}
}
