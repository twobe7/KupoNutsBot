@page "/leaderboards"
@using FC.Utils;
@using NodaTime;
@using System.Globalization;
@using RPC;

@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (this.AllUsers == null)
{
	<p><em>Loading...</em></p>
}
else
{
<div class="wrapper ml-5 w-75">

	<div class="mt-5 d-flex justify-content-between">
		<h3 class="text-white">Nuts</h3>

		@if (RPCService.CanManageGuild)
		{
			<button type="button" class="btn btn-danger btn-sm mb-2" @onclick="this.ResetNuts">Reset All Nuts</button>
		}
	</div>
	
	<table class="table table-dark">
		<thead>
			<tr>
				<th width="50%">Name</th>
				<th>Nuts</th>
			</tr>
		</thead>
		<tbody>
			@foreach (GuildUser user in this.AllUsers.OrderByDescending(x => x.Nuts))
			{
				<tr class="table-clickable">
					<td>@user.Name</td>
					<td>@user.Nuts</td>
				</tr>
			}
		</tbody>
	</table>

	<h3 class="mt-5 text-white">Levels</h3>
	<table class="table table-dark">
		<thead>
			<tr>
				<th width="50%">Name</th>
				<th>Total XP</th>
				<th>Level</th>
			</tr>
		</thead>
		<tbody>
			@foreach (GuildUser user in this.AllUsers.OrderByDescending(x => x.TotalXPCurrent))
			{
				<tr class="table-clickable">
					<td>@user.Name</td>
					<td>@user.TotalXPCurrent</td>
					<td>@user.Level</td>
				</tr>
			}
		</tbody>
	</table>

	<h3 class="mt-5 text-white">Reputation</h3>
	<table class="table table-dark">
		<thead>
			<tr>
				<th width="50%">Name</th>
				<th>Reputation</th>
			</tr>
		</thead>
		<tbody>
			@foreach (GuildUser user in this.AllUsers.OrderByDescending(x => x.Rep))
			{
				<tr class="table-clickable">
					<td>@user.Name</td>
					<td>@user.Rep</td>
				</tr>
			}
		</tbody>
	</table>

	<div class="push"></div>
</div>
	<div class="footer">
		<div class="footer-content">
			@*<button class="btn btn-primary" @onclick="this.OnCreateNew">New</button>*@
		</div>
	</div>
}

@code {

	public List<GuildUser> AllUsers;

	protected override async Task OnInitializedAsync()
	{
		if (!Authentication.IsAuthenticated)
		{
			this.NavigationManager.NavigateTo("/");
			return;
		}

		await base.OnInitializedAsync();

		this.AllUsers = await RPCService.Invoke<List<GuildUser>>("GuildService.GetGuildUsers");
	}

	protected async void ResetNuts()
	{
		bool confirmed = await Modal.Show<bool, Confirm>("Reset Kupo Nuts", "Are you sure you wish to reset all user's Kupo Nuts back to 0?", "Reset", true);
		if (confirmed)
		{
			await RPCService.Invoke("GuildService.ResetGuildUserNuts");
			this.AllUsers = await RPCService.Invoke<List<GuildUser>>("GuildService.GetGuildUsers");
			this.StateHasChanged();
		}
	}

	////protected async void OnEdit(GuildUser user)
	////{
	////	ModalParameters parameters = new ModalParameters();
	////	parameters.Add("User", user);

	////	await Modal.Show<ShopItemEditor>("Edit Shop Item", item);
	////	this.AllShopItems = await RPCService.Invoke<List<ShopItem>>("ShopService.GetShopItems");
	////	this.StateHasChanged();
	////}

	////protected void OnCreateNew()
	////{
	////	ShopItem item = new ShopItem();
	////	item.Id = Guid.NewGuid().ToString();
	////	OnEdit(item);
	////}
}
