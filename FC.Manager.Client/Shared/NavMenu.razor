@inject IModalService Modal
@inject NavigationManager NavigationManager

<div id="nav-menu" class="wrapper">

	<div class="form-group" style="margin: 16px 16px 0px 16px">
		<select class="form-control" @bind="this.SelectedGuild">

			@foreach (Authentication.Data.Guild guild in Authentication.Guilds)
			{
				@if (!guild.CanManageGuild && !guild.IsInGuild)
					continue;

				<option value=@guild.Id.ToString()>@guild.Name</option>
			}
		</select>
	</div>


	<ul class="nav flex-column">

		<li class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="oi oi-home" aria-hidden="true"></span> Home
			</NavLink>
		</li>

		@if (IsInGuild)
		{
			bool canManage = Authentication.Guilds.FirstOrDefault(x => x.Id == RPC.RPCService.GuildId.ToString()).CanManageGuild;

			if (canManage)
			{
				<li class="nav-item px-3">
					<NavLink class="nav-link" href="events">
						<span class="oi oi-bell" aria-hidden="true"></span> Events
					</NavLink>
				</li>

				@*<li class="nav-item px-3">
					<NavLink class="nav-link" href="eventsV2">
						<span class="oi oi-bell" aria-hidden="true"></span> Events V2
					</NavLink>
				</li>*@

				<li class="nav-item px-3">
					<NavLink class="nav-link" href="shop">
						<span class="oi oi-cart" aria-hidden="true"></span> Shop Configuration
					</NavLink>
				</li>

				<li class="nav-item px-3">
					<NavLink class="nav-link" href="reactionrole">
						<span class="oi oi-people" aria-hidden="true"></span> Reaction Roles
					</NavLink>
				</li>

				<li class="nav-item px-3">
					<NavLink class="nav-link" href="contentcreators">
						<span class="oi oi-video" aria-hidden="true"></span> Content Creators
					</NavLink>
				</li>
			}

			<li class="nav-item px-3">
				<NavLink class="nav-link" href="leaderboards">
					<span class="oi oi-bar-chart" aria-hidden="true"></span> Leaderboards
				</NavLink>
			</li>
		}
	</ul>


	<div class="footer-transparent" style="height: auto; position: absolute; bottom: 0px;">
		<div class="nav-item px-3" style="padding-bottom: 0px">
			<div class="alert alert-dark justify-content-center">
				Your timezone has been set to: @NodaTime.DateTimeZoneProviders.Tzdb.GetSystemDefault().ToString()
			</div>
		</div>
	</div>
</div>


@code
{
	public string SelectedGuild
	{
		get
		{
			return RPC.RPCService.GuildId.ToString();
		}

		set
		{
			RPC.RPCService.GuildId = ulong.Parse(value);
			RPC.RPCService.CanManageGuild = Authentication.Guilds.FirstOrDefault(x => x.Id == RPC.RPCService.GuildId.ToString()).CanManageGuild;
			this.UpdateGuild();
		}
	}

	public bool IsInGuild
	{
		get;
		set;
	}

	protected override async Task OnInitializedAsync()
	{
		this.IsInGuild = false;

		if (!Authentication.IsAuthenticated)
			return;

		IsInGuild = await RPC.RPCService.Invoke<bool>("GuildService.IsInGuild", RPC.RPCService.GuildId);

		await base.OnInitializedAsync();
		
	}

	private void UpdateGuild()
	{
		NavigationManager.NavigateTo("/temp");
		NavigationManager.NavigateTo("/");
		
		this.StateHasChanged();
	}
}
